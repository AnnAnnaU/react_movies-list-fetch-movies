{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","api/api.js","components/FindMovie/FindMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","key","imdbId","BASE_URL","getMovie","a","fetch","response","json","FindMovie","onAdd","error","setError","useState","setTitle","newMovie","setNewMovie","isMovieFind","setIsMovieFind","movieFromServer","Plot","Poster","imdbID","Error","onSubmit","e","preventDefault","findNewMovie","htmlFor","type","id","value","placeholder","onChange","target","onClick","App","data","setMovies","find","prevMoviesList","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e2ca53c7.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = ({\n  title,\n  description = '',\n  imgUrl,\n  imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({\n  movies = [],\n}) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      imdbId: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","const BASE_URL = 'https://www.omdbapi.com/?apikey=471d12fb&t=';\n\nexport const request = (url, options) => (fetch(`${BASE_URL}${url}`, options)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status}`);\n    }\n\n    return response.json();\n  })\n);\n\nexport const getMovie = async(title) => {\n  const response = await fetch(`${BASE_URL}${title}`);\n\n  return response.json();\n};\n","import React, { useState } from 'react';\nimport './FindMovie.scss';\n\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\nimport { getMovie } from '../../api/api';\n\nexport const FindMovie = ({\n  onAdd, error, setError,\n}) => {\n  const [title, setTitle] = useState('');\n  const [newMovie, setNewMovie] = useState(null);\n  const [isMovieFind, setIsMovieFind] = useState(true);\n\n  const handleChange = ({ target }) => {\n    setTitle(target.value);\n    setError(false);\n    setIsMovieFind(true);\n  };\n\n  async function findNewMovie() {\n    const movieFromServer = await getMovie(title);\n\n    setNewMovie({\n      title,\n      description: movieFromServer.Plot,\n      imgUrl: movieFromServer.Poster,\n      imdbUrl: `https://www.imdb.com/title/${movieFromServer.imdbID}/`,\n      imdbId: movieFromServer.imdbID,\n    });\n\n    if (movieFromServer.Error) {\n      setNewMovie(null);\n      setTitle('');\n      setIsMovieFind(false);\n    }\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    findNewMovie();\n  };\n\n  const addMovie = () => {\n    if (newMovie) {\n      onAdd(newMovie);\n      setTitle('');\n      setNewMovie(null);\n    }\n  };\n\n  return (\n    <>\n      <form\n        onSubmit={handleSubmit}\n        className=\"find-movie\"\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Find movie and add to the list\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              value={title}\n              placeholder=\"Enter a title to search\"\n              className={error\n                ? 'input is-danger'\n                : 'input'\n              }\n              onChange={handleChange}\n            />\n          </div>\n\n          {!isMovieFind\n            && (\n              <p className=\"help is-danger\">\n                Can&apos;t find a movie with such a title\n              </p>\n            )\n          }\n          {error\n            && (\n              <p className=\"help is-danger\">\n                This movie is already on the list\n              </p>\n            )\n          }\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"submit\"\n              className=\"button is-light\"\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-primary\"\n              onClick={addMovie}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      {\n        newMovie\n        && (\n          <div className=\"container\">\n            <h2 className=\"title\">Preview</h2>\n            <MovieCard {...newMovie} />\n          </div>\n        )\n      }\n    </>\n  );\n};\n\nFindMovie.propTypes = {\n  onAdd: PropTypes.func.isRequired,\n  setError: PropTypes.func.isRequired,\n  error: PropTypes.bool.isRequired,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport data from './api/movies.json';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(data);\n  const [error, setError] = useState(false);\n\n  const addNewMovie = (newMovie) => {\n    if (movies.find(movie => movie.imdbId === newMovie.imdbId)\n      || !newMovie.imdbId) {\n      setError(true);\n\n      return;\n    }\n\n    setMovies(prevMoviesList => [newMovie, ...prevMoviesList]);\n    setError(false);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie\n          onAdd={addNewMovie}\n          setError={setError}\n          error={error}\n        />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}